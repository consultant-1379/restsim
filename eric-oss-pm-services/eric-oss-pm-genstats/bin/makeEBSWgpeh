#!/bin/bash

ROOT_DIR=`dirname $0`
. ${ROOT_DIR}/functions

getRncMimVer()
{
    MY_RNC=$1

    cat ${TMP_DIR}/mim_ver.txt | nawk -v rnc=${MY_RNC} '{if ($1 == rnc ) {print $2} }' | sed 's/\./_/g'
}

getRncId()
{
    MY_RNC=$1

    MY_RNC_ID=`cat ${RNC_ID_FILE} | awk '{ if ( $1 ~ /^Sub/ ) { printf "%s ", $1; } else { print $0 } }' | grep "MeContext=${RNC}," | awk '{print $7}'`
    echo ${MY_RNC_ID}
}

getFFV()
{
    MY_MIM_VER=$1

    MY_RNC_FMT_VER=$(eval "echo \$$(echo ${MY_MIM_VER}_RNC_FMT_VER)")
    if [ -z "${MY_RNC_FMT_VER}" ] ; then
        exit 1
    fi

    # Hack here! Can't figure out how to make the above line retain the 
    # space at the start of the FMT_VER, so we'll include an extra
    # space in the echo below
    echo " ${MY_RNC_FMT_VER}"
}

makeSubFile() {
    MY_RNC=$1
    MY_MP_INDEX=$2
    MY_CELL_ID_LIST=$3
    MY_MIM_VER=$4

    log " Creating XML for MP ${MY_MP_INDEX} for ${MY_RNC} with cells from ${MY_CELL_ID_LIST}"

    cat > ${TMP_DIR}/${RNC}_mp${MP_INDEX}.xml <<EOF
<?xml version="1.0" encoding="UTF-8"?>
    <gpeh>
EOF
    
    while read CELL_ID ; do
        cat ${TMP_DIR}/XML_Events.${MY_RNC} |  sed "s/^ *<c-id-\(.\)>[0-9]*/<c-id-\1>${CELL_ID}/" \
            >> ${TMP_DIR}/${MY_RNC}_mp${MY_MP_INDEX}.xml
    done < ${MY_CELL_ID_LIST}

    cat >> ${TMP_DIR}/${MY_RNC}_mp${MY_MP_INDEX}.xml <<EOF
<footer>
<year>2007</year>
<month>11</month>
<day>29</day>
<hour>14</hour>
<minute>15</minute>
<second>0</second>
</footer>
</gpeh>
EOF

XML2GPEH=`getXml2Gpeh ${MY_MIM_VER}`
log " Encoding XML to GPEH for ${MY_RNC} MP ${MY_MP_INDEX}"
${XML2GPEH} ${TMP_DIR}/${MY_RNC}_mp${MY_MP_INDEX}.xml ${TMP_DIR}/${MY_RNC}_mp${MY_MP_INDEX}.bin   
}

printUsage()
{
    cat <<EOF
Usage: makeEBSWgpeh -i Input dir with GPEH bin -g oss.cfg -e eventCounts [ -t tmpdir ]

where
Input dir
The directory containing the binary GPEH files called <MIM_VER>.bin, e.g. M_1_115.bin

ossCfg
The cfg file to use. This contains various setting for the deployment

eventCounts
event distribution file containing lines in the format
event-type=event-count

ropPeroid
15 or 1 
EOF
}

SKIP_IF_EXISTS=0
KEEP_TMP=0

TMP_ROOT=/tmp
while getopts  "i:e:g:t:r:sk" flag
do
    case "$flag" in
        i) IN_DIR="$OPTARG";;
        e) EVENT_COUNTS_FILE=$OPTARG;;
        g) OSS_MASTER_CFG="$OPTARG";;
        t) TMP_ROOT="$OPTARG";;

        s) SKIP_IF_EXISTS=1;;
        k) KEEP_TMP=1;;

        *) printUsage
            exit 1;;
    esac
done

if [ -z "${IN_DIR}" ] || [ ! -r "${EVENT_COUNTS_FILE}" ] || [ -z "${OSS_MASTER_CFG}" ] ; then
    printUsage
    exit 1
fi

if [ ! -d "${IN_DIR}" ] ; then
    echo "ERROR: Input directory \"${IN_DIR}\" does not exist"
    printUsage
    exit 1
fi

if [ ! -d "${TMP_ROOT}" ] ; then
    echo "ERROR: tmp directory \"${TMP_ROOT}\" does not exist"
    printUsage
    exit 1
fi

if [ -r ${OSS_MASTER_CFG} ] ; then
    . ${OSS_MASTER_CFG} > /dev/null 2>&1
else
    echo "ERROR: Cannot file OSS cfg file ${OSS_MASTER_CFG}"
    exit 1
fi

checkPMDIR
if [ $? -ne 0 ] ; then
    log "ERROR: PMDIR not set correctly"
    exit 1
else
    OUT_DIR=${PMDIR}/gpeh_templates
fi

# Verify /opt/ericsson/eba_rnctools exists
if [ ! -d /opt/ericsson/eba_rnctools ] ; then
    echo "ERROR: /opt/ericsson/eba_rnctools not found"
    exit 1
fi

TMP_DIR=${TMP_ROOT}/makeebsw
if [ ! -d ${TMP_DIR} ] ; then
    mkdir ${TMP_DIR}
fi

if [ ! -d "${OUT_DIR}" ] ; then
    echo "Creating ${OUT_DIR}"
    mkdir ${OUT_DIR}
    if [ $? -ne 0 ] ; then
        echo "ERROR: Failed to create directory ${OUT_DIR}"
        exit 1
    fi
fi

EVENT_COUNTS=`cat ${EVENT_COUNTS_FILE}`

CELL_LIST=${TMP_DIR}/ucid.txt
RNC_ID_FILE=${TMP_DIR}/rncid.txt
if [ ! -r ${TMP_DIR}/mim_ver.txt ] ; then
    log "Get MIM Versions"
    /opt/ericsson/nms_cif_cs/etc/unsupported/bin/cstest -s Seg_masterservice_CS lt MeContext -f '$.neMIMName==RNC_NODE_MODEL' -an neMIMversion | \
        awk '{if ( $1 ~ /^Sub/ ) { rnc=$1 } else if ( $2 ~ /^neMIMversion/ ) { print rnc, $6; } }' | \
        sed 's/^[^ ]*MeContext=//' | sed 's/"v//' | sed 's/"//g' > ${TMP_DIR}/mim_ver.txt
    
    log "Get Cell IDs"
    /opt/ericsson/nms_cif_cs/etc/unsupported/bin/cstest -s Seg_masterservice_CS lt UtranCell -an cId > ${CELL_LIST}
    
    log "Get RNC IDs"
    /opt/ericsson/nms_cif_cs/etc/unsupported/bin/cstest -s Seg_masterservice_CS lt RncFunction -an rncId > ${RNC_ID_FILE}
fi

RNC_LIST=`cat ${TMP_DIR}/mim_ver.txt | awk '{print $1}' | sort -n`

RNC_EVENTS_DEF_FILE=`ls /opt/ericsson/eba_rnctools/pylib/gpehgenlib/def/RncEventDefs* | tail -1`
EVENT_NAMES=`cat ${EVENT_COUNTS_FILE} | grep = | awk -F= '{print $1}'`
EVENT_ID_STR=""
for EVENT_NAME in ${EVENT_NAMES} ; do
    if [ ! -z "${EVENT_ID_STR}" ] ; then
        EVENT_ID_STR="${EVENT_ID_STR},"
    fi

    SEARCH_NAME=`echo ${EVENT_NAME} | tr "[:lower:]" "[:upper:]" | sed 's/-/_/g'`
    EVENT_ID=`grep -w  ${SEARCH_NAME} ${RNC_EVENTS_DEF_FILE} | sed "s/.* id='//" | sed "s/'>$//"`
    if [ -z "${EVENT_ID}" ] ; then
        echo "ERROR: Failed to get id for ${EVENT_NAME}"
        break
    fi

    EVENT_ID_STR="${EVENT_ID_STR}${EVENT_ID}"
done

#
# Before we do any real work, lets try and make we that we have all the files required
#
for RNC in ${RNC_LIST} ; do
    #
    # Check that the RNC has cells
    #
    NUM_CELLS=`grep -c "MeContext=${RNC}," ${CELL_LIST} | awk '{print $1}'`
    if [ ${NUM_CELLS} -eq 0 ] ; then
        continue
    fi

    RNC_MIM_VER=`getRncMimVer $RNC`
    if [ ! -r ${IN_DIR}/${RNC_MIM_VER}.bin ] ; then
        echo "Could not find ${IN_DIR}/${RNC_MIM_VER}.bin for ${RNC}"
        exit 1
    fi

    RNC_FFV=`getFFV ${RNC_MIM_VER}`
    if [ -z "${RNC_FFV}" ] ; then
        echo "ERROR: Failed to get FFV for ${RNC_MIM_VER} for ${RNC}"
        exit 1
    fi

    GPEH2XML=`getGpeh2Xml ${RNC_MIM_VER}`
    if [ -z "${GPEH2XML}" ] ; then
        echo "ERROR: Could not get gpeh2Xml for MIM version ${RNC_MIM_VER}"
        exit 1
    fi
    if [ ! -r "${GPEH2XML}" ] ; then
        echo "ERROR: ${GPEH2XML} not found"
        exit 1
    fi

    XML2GPEH=`getXml2Gpeh ${RNC_MIM_VER}`
    if [ -z "${XML2GPEH}" ] ; then
        echo "ERROR: Could not get xml2gpeh for MIM version ${RNC_MIM_VER}"
        exit 1
    fi
    if [ ! -r "${XML2GPEH}" ] ; then
        echo "ERROR: ${XML2GPEH} not found"
        exit 1
    fi
done

#
# Okay, looks like we have everything we need, so lets get work
#
for RNC in ${RNC_LIST} ; do
    log "${RNC}"

    if [ ${SKIP_IF_EXISTS} -eq 1 ] && [ -r ${OUT_DIR}/${RNC}.ebsw_templates.tar.gz ] ; then
        log "INFO: File already exists for ${RNC}"
        continue
    fi

    #
    # Check that the RNC has cells
    #
    NUM_CELLS=`grep -c "MeContext=${RNC}," ${CELL_LIST} | awk '{print $1}'`
    if [ ${NUM_CELLS} -eq 0 ] ; then
        log " Zero cells, skipping"
        continue
    fi

    RNC_MIM_VER=`getRncMimVer $RNC`
    if [ ! -r ${TMP_DIR}/XML_Events.${RNC_MIM_VER} ] ; then
        # Let filter the file first so that we're only dealing with EBS-W events
        RNC_FFV=`getFFV ${RNC_MIM_VER}`
        log "Filtering ${RNC_MIM_VER} GPEH"
        ${ROOT_DIR}/makeGpeh --input ${IN_DIR}/${RNC_MIM_VER}.bin --out ${TMP_DIR}/${RNC_MIM_VER}.bin \
            --filter include --events ${EVENT_ID_STR} --fmt "${RNC_FFV}"
        if [ $? -ne 0 ] ; then
            echo "ERROR: Failed to filter ${IN_DIR}/${MIM_VER}.bin"
            exit 1
        fi

        GPEH2XML=`getGpeh2Xml ${RNC_MIM_VER}`
        log " Decoding ${TMP_DIR}/${RNC_MIM_VER}.bin to XML using ${GPEH2XML}"
        ${GPEH2XML} ${TMP_DIR}/${RNC_MIM_VER}.bin ${TMP_DIR}/${RNC_MIM_VER}.xml
        if [ $? -ne 0 ] ; then
            echo "ERROR: Decode failed"
            exit 1
        fi

        EVENT_COUNT_PARAM=""
        for EVENT_COUNT in ${EVENT_COUNTS} ; do
            EVENT_COUNT_PARAM="${EVENT_COUNT_PARAM} --eventcount ${EVENT_COUNT}"
        done
        log " Extracting events from ${TMP_DIR}/${RNC_MIM_VER}.xml"
        ${ROOT_DIR}/splitGPEHxml --in ${TMP_DIR}/${RNC_MIM_VER}.xml --out ${TMP_DIR}/XML_Events.${RNC_MIM_VER} ${EVENT_COUNT_PARAM}
        if [ $? -ne 0 ] ; then
            echo "ERROR: Extraction failed"
            exit 1
        fi
    fi

    #
    # Extract the cell ids for this RNC
    #
    grep -n "MeContext=${RNC}," ${CELL_LIST} | awk -F: '{print $1}' > ${TMP_DIR}/${RNC}_linenum
    FIRST_LINE=`head -1 ${TMP_DIR}/${RNC}_linenum`
    LAST_LINE=`tail -1 ${TMP_DIR}/${RNC}_linenum`
    NUM_LINES=`expr ${LAST_LINE} - ${FIRST_LINE} + 2`
    tail +${FIRST_LINE} ${CELL_LIST} | head -${NUM_LINES} | grep ' cId ' | sed 's/.*: //' | sort -un > ${TMP_DIR}/${RNC}_cid

    NUM_CELLS=`wc -l ${TMP_DIR}/${RNC}_cid | awk '{print $1}'` 
    NE_NUM_SUB_FILES=`getNumSubFiles ${RNC} ${NUM_CELLS}`
    if [ $? -ne 0 ] ; then
        log "ERROR: Failed to get number of MPs for ${RNC}, ${NE_NUM_SUB_FILES}"
        exit 1
    fi

    ACTUAL_GPEH_CELLS_PER_MP=`expr ${NUM_CELLS} / ${NE_NUM_SUB_FILES}`

    split -l ${ACTUAL_GPEH_CELLS_PER_MP} ${TMP_DIR}/${RNC}_cid ${TMP_DIR}/${RNC}_cid_MP.

    log " Starting RNC ${RNC} which has ${NUM_CELLS} cells so we need ${NE_NUM_SUB_FILES} files (Cells/File ${ACTUAL_GPEH_CELLS_PER_MP})"

    RNC_ID=`getRncId ${RNC}`
    log " Replacing rnc-id with ${RNC_ID}"
    cat ${TMP_DIR}/XML_Events.${RNC_MIM_VER} | sed -e  "s/^ *<rnc-id-\(.\)>[0-9]*/<rnc-id-\1>${RNC_ID}/" > ${TMP_DIR}/XML_Events.${RNC}

    MP_INDEX=1
    while [ ${MP_INDEX} -le ${NE_NUM_SUB_FILES} ] ; do
        MP_CELL_ID_LIST=`ls ${TMP_DIR}/${RNC}_cid_MP.* | head -${MP_INDEX} | tail -1`
        makeSubFile ${RNC} ${MP_INDEX} ${MP_CELL_ID_LIST} ${RNC_MIM_VER} &
        MP_INDEX=`expr ${MP_INDEX} + 1`
    done
    wait

    # Validate we have all the MPs we expect
    MP_INDEX=1
    while [ ${MP_INDEX} -le ${NE_NUM_SUB_FILES} ] ; do
        if [ ! -r ${TMP_DIR}/${RNC}_mp${MP_INDEX}.bin ] ; then
            log "ERROR: Generation of file for ${RNC} MP ${MP_INDEX} seem to have failed"
            exit 1
        fi
        MP_INDEX=`expr ${MP_INDEX} + 1`
    done

    log " Tarring Generated files"
    `cd ${TMP_DIR} ; tar cf - ${RNC}*.bin | gzip > ${OUT_DIR}/${RNC}.ebsw_templates.tar.gz`
    if [ ${KEEP_TMP} -eq 0 ] ; then
        rm ${TMP_DIR}/${RNC}*
    fi
done

if [ ${KEEP_TMP} -eq 0 ] ; then
    rm -rf ${TMP_DIR}
fi

log "Done"
